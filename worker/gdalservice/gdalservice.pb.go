// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gdalservice.proto

/*
Package gdalservice is a generated protocol buffer package.

It is generated from these files:
	gdalservice.proto

It has these top-level messages:
	GeoRPCGranule
	Raster
	TimeSeries
	Overview
	GeoMetaData
	GeoFile
	Result
*/
package gdalservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GeoRPCGranule struct {
	Path        string    `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Geometry    string    `protobuf:"bytes,2,opt,name=geometry" json:"geometry,omitempty"`
	Bands       []int32   `protobuf:"varint,3,rep,packed,name=bands" json:"bands,omitempty"`
	Height      int32     `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
	Width       int32     `protobuf:"varint,5,opt,name=width" json:"width,omitempty"`
	EPSG        int32     `protobuf:"varint,6,opt,name=ePSG" json:"ePSG,omitempty"`
	Geot        []float64 `protobuf:"fixed64,7,rep,packed,name=geot" json:"geot,omitempty"`
	BandStrides int32     `protobuf:"varint,8,opt,name=bandStrides" json:"bandStrides,omitempty"`
}

func (m *GeoRPCGranule) Reset()                    { *m = GeoRPCGranule{} }
func (m *GeoRPCGranule) String() string            { return proto.CompactTextString(m) }
func (*GeoRPCGranule) ProtoMessage()               {}
func (*GeoRPCGranule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GeoRPCGranule) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GeoRPCGranule) GetGeometry() string {
	if m != nil {
		return m.Geometry
	}
	return ""
}

func (m *GeoRPCGranule) GetBands() []int32 {
	if m != nil {
		return m.Bands
	}
	return nil
}

func (m *GeoRPCGranule) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GeoRPCGranule) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *GeoRPCGranule) GetEPSG() int32 {
	if m != nil {
		return m.EPSG
	}
	return 0
}

func (m *GeoRPCGranule) GetGeot() []float64 {
	if m != nil {
		return m.Geot
	}
	return nil
}

func (m *GeoRPCGranule) GetBandStrides() int32 {
	if m != nil {
		return m.BandStrides
	}
	return 0
}

type Raster struct {
	Data       []byte  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	NoData     float64 `protobuf:"fixed64,2,opt,name=noData" json:"noData,omitempty"`
	RasterType string  `protobuf:"bytes,3,opt,name=rasterType" json:"rasterType,omitempty"`
	Bbox       []int32 `protobuf:"varint,4,rep,packed,name=bbox" json:"bbox,omitempty"`
}

func (m *Raster) Reset()                    { *m = Raster{} }
func (m *Raster) String() string            { return proto.CompactTextString(m) }
func (*Raster) ProtoMessage()               {}
func (*Raster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Raster) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Raster) GetNoData() float64 {
	if m != nil {
		return m.NoData
	}
	return 0
}

func (m *Raster) GetRasterType() string {
	if m != nil {
		return m.RasterType
	}
	return ""
}

func (m *Raster) GetBbox() []int32 {
	if m != nil {
		return m.Bbox
	}
	return nil
}

type TimeSeries struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	Count int32   `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *TimeSeries) Reset()                    { *m = TimeSeries{} }
func (m *TimeSeries) String() string            { return proto.CompactTextString(m) }
func (*TimeSeries) ProtoMessage()               {}
func (*TimeSeries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TimeSeries) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TimeSeries) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Overview struct {
	XSize int32 `protobuf:"varint,1,opt,name=xSize" json:"xSize,omitempty"`
	YSize int32 `protobuf:"varint,2,opt,name=ySize" json:"ySize,omitempty"`
}

func (m *Overview) Reset()                    { *m = Overview{} }
func (m *Overview) String() string            { return proto.CompactTextString(m) }
func (*Overview) ProtoMessage()               {}
func (*Overview) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Overview) GetXSize() int32 {
	if m != nil {
		return m.XSize
	}
	return 0
}

func (m *Overview) GetYSize() int32 {
	if m != nil {
		return m.YSize
	}
	return 0
}

type GeoMetaData struct {
	DatasetName  string                       `protobuf:"bytes,1,opt,name=datasetName" json:"datasetName,omitempty"`
	NameSpace    string                       `protobuf:"bytes,2,opt,name=nameSpace" json:"nameSpace,omitempty"`
	Type         string                       `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	RasterCount  int32                        `protobuf:"varint,4,opt,name=rasterCount" json:"rasterCount,omitempty"`
	TimeStamps   []*google_protobuf.Timestamp `protobuf:"bytes,5,rep,name=timeStamps" json:"timeStamps,omitempty"`
	Height       []float64                    `protobuf:"fixed64,6,rep,packed,name=height" json:"height,omitempty"`
	Overviews    []*Overview                  `protobuf:"bytes,7,rep,name=overviews" json:"overviews,omitempty"`
	XSize        int32                        `protobuf:"varint,8,opt,name=xSize" json:"xSize,omitempty"`
	YSize        int32                        `protobuf:"varint,9,opt,name=ySize" json:"ySize,omitempty"`
	GeoTransform []float64                    `protobuf:"fixed64,10,rep,packed,name=geoTransform" json:"geoTransform,omitempty"`
	Polygon      string                       `protobuf:"bytes,11,opt,name=polygon" json:"polygon,omitempty"`
	ProjWKT      string                       `protobuf:"bytes,12,opt,name=projWKT" json:"projWKT,omitempty"`
	Proj4        string                       `protobuf:"bytes,13,opt,name=proj4" json:"proj4,omitempty"`
}

func (m *GeoMetaData) Reset()                    { *m = GeoMetaData{} }
func (m *GeoMetaData) String() string            { return proto.CompactTextString(m) }
func (*GeoMetaData) ProtoMessage()               {}
func (*GeoMetaData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GeoMetaData) GetDatasetName() string {
	if m != nil {
		return m.DatasetName
	}
	return ""
}

func (m *GeoMetaData) GetNameSpace() string {
	if m != nil {
		return m.NameSpace
	}
	return ""
}

func (m *GeoMetaData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GeoMetaData) GetRasterCount() int32 {
	if m != nil {
		return m.RasterCount
	}
	return 0
}

func (m *GeoMetaData) GetTimeStamps() []*google_protobuf.Timestamp {
	if m != nil {
		return m.TimeStamps
	}
	return nil
}

func (m *GeoMetaData) GetHeight() []float64 {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *GeoMetaData) GetOverviews() []*Overview {
	if m != nil {
		return m.Overviews
	}
	return nil
}

func (m *GeoMetaData) GetXSize() int32 {
	if m != nil {
		return m.XSize
	}
	return 0
}

func (m *GeoMetaData) GetYSize() int32 {
	if m != nil {
		return m.YSize
	}
	return 0
}

func (m *GeoMetaData) GetGeoTransform() []float64 {
	if m != nil {
		return m.GeoTransform
	}
	return nil
}

func (m *GeoMetaData) GetPolygon() string {
	if m != nil {
		return m.Polygon
	}
	return ""
}

func (m *GeoMetaData) GetProjWKT() string {
	if m != nil {
		return m.ProjWKT
	}
	return ""
}

func (m *GeoMetaData) GetProj4() string {
	if m != nil {
		return m.Proj4
	}
	return ""
}

type GeoFile struct {
	FileName string         `protobuf:"bytes,1,opt,name=fileName" json:"fileName,omitempty"`
	Driver   string         `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	DataSets []*GeoMetaData `protobuf:"bytes,3,rep,name=dataSets" json:"dataSets,omitempty"`
}

func (m *GeoFile) Reset()                    { *m = GeoFile{} }
func (m *GeoFile) String() string            { return proto.CompactTextString(m) }
func (*GeoFile) ProtoMessage()               {}
func (*GeoFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GeoFile) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *GeoFile) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *GeoFile) GetDataSets() []*GeoMetaData {
	if m != nil {
		return m.DataSets
	}
	return nil
}

type Result struct {
	TimeSeries []*TimeSeries `protobuf:"bytes,1,rep,name=timeSeries" json:"timeSeries,omitempty"`
	Raster     *Raster       `protobuf:"bytes,2,opt,name=raster" json:"raster,omitempty"`
	Info       *GeoFile      `protobuf:"bytes,3,opt,name=info" json:"info,omitempty"`
	Error      string        `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Result) GetTimeSeries() []*TimeSeries {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *Result) GetRaster() *Raster {
	if m != nil {
		return m.Raster
	}
	return nil
}

func (m *Result) GetInfo() *GeoFile {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Result) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*GeoRPCGranule)(nil), "gdalservice.GeoRPCGranule")
	proto.RegisterType((*Raster)(nil), "gdalservice.Raster")
	proto.RegisterType((*TimeSeries)(nil), "gdalservice.TimeSeries")
	proto.RegisterType((*Overview)(nil), "gdalservice.Overview")
	proto.RegisterType((*GeoMetaData)(nil), "gdalservice.GeoMetaData")
	proto.RegisterType((*GeoFile)(nil), "gdalservice.GeoFile")
	proto.RegisterType((*Result)(nil), "gdalservice.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GDAL service

type GDALClient interface {
	Process(ctx context.Context, in *GeoRPCGranule, opts ...grpc.CallOption) (*Result, error)
}

type gDALClient struct {
	cc *grpc.ClientConn
}

func NewGDALClient(cc *grpc.ClientConn) GDALClient {
	return &gDALClient{cc}
}

func (c *gDALClient) Process(ctx context.Context, in *GeoRPCGranule, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/gdalservice.GDAL/Process", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GDAL service

type GDALServer interface {
	Process(context.Context, *GeoRPCGranule) (*Result, error)
}

func RegisterGDALServer(s *grpc.Server, srv GDALServer) {
	s.RegisterService(&_GDAL_serviceDesc, srv)
}

func _GDAL_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoRPCGranule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GDALServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gdalservice.GDAL/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GDALServer).Process(ctx, req.(*GeoRPCGranule))
	}
	return interceptor(ctx, in, info, handler)
}

var _GDAL_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gdalservice.GDAL",
	HandlerType: (*GDALServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _GDAL_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gdalservice.proto",
}

func init() { proto.RegisterFile("gdalservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x4f, 0x6f, 0xda, 0x4e,
	0x10, 0x95, 0x7f, 0x80, 0x81, 0x71, 0x72, 0xf8, 0x6d, 0xd3, 0x76, 0x85, 0xaa, 0xd6, 0xf2, 0x09,
	0xa9, 0x12, 0x91, 0x48, 0xd4, 0x56, 0xb9, 0xb5, 0x89, 0xca, 0xa1, 0xff, 0xa2, 0x35, 0x52, 0xcf,
	0x0b, 0x0c, 0xc6, 0x95, 0xed, 0x45, 0xbb, 0x0b, 0x09, 0xfd, 0x40, 0x3d, 0xf6, 0x9b, 0xf4, 0x3b,
	0x55, 0x3b, 0x6b, 0x82, 0x89, 0x7a, 0x9b, 0xf7, 0x3c, 0x3b, 0x3b, 0x33, 0xef, 0xad, 0xe1, 0xff,
	0x6c, 0x21, 0x0b, 0x83, 0x7a, 0x9b, 0xcf, 0x71, 0xb4, 0xd6, 0xca, 0x2a, 0x16, 0x35, 0xa8, 0xc1,
	0xab, 0x4c, 0xa9, 0xac, 0xc0, 0x73, 0xfa, 0x34, 0xdb, 0x2c, 0xcf, 0x6d, 0x5e, 0xa2, 0xb1, 0xb2,
	0x5c, 0xfb, 0xec, 0xe4, 0x4f, 0x00, 0xa7, 0x13, 0x54, 0xe2, 0xf6, 0x7a, 0xa2, 0x65, 0xb5, 0x29,
	0x90, 0x31, 0x68, 0xaf, 0xa5, 0x5d, 0xf1, 0x20, 0x0e, 0x86, 0x7d, 0x41, 0x31, 0x1b, 0x40, 0x2f,
	0x43, 0x55, 0xa2, 0xd5, 0x3b, 0xfe, 0x1f, 0xf1, 0x0f, 0x98, 0x9d, 0x41, 0x67, 0x26, 0xab, 0x85,
	0xe1, 0xad, 0xb8, 0x35, 0xec, 0x08, 0x0f, 0xd8, 0x33, 0x08, 0x57, 0x98, 0x67, 0x2b, 0xcb, 0xdb,
	0x71, 0x30, 0xec, 0x88, 0x1a, 0xb9, 0xec, 0xbb, 0x7c, 0x61, 0x57, 0xbc, 0x43, 0xb4, 0x07, 0xee,
	0x4e, 0xbc, 0x4d, 0x27, 0x3c, 0x24, 0x92, 0x62, 0xc7, 0x65, 0xa8, 0x2c, 0xef, 0xc6, 0xad, 0x61,
	0x20, 0x28, 0x66, 0x31, 0x44, 0xae, 0x7c, 0x6a, 0x75, 0xbe, 0x40, 0xc3, 0x7b, 0x94, 0xde, 0xa4,
	0x92, 0x15, 0x84, 0x42, 0x1a, 0x8b, 0xda, 0x9d, 0x5f, 0x48, 0x2b, 0x69, 0x8e, 0x13, 0x41, 0xb1,
	0xeb, 0xaa, 0x52, 0x37, 0x8e, 0x75, 0x53, 0x04, 0xa2, 0x46, 0xec, 0x25, 0x80, 0xa6, 0x53, 0xd3,
	0xdd, 0x1a, 0x79, 0x8b, 0x26, 0x6c, 0x30, 0xae, 0xd6, 0x6c, 0xa6, 0xee, 0x79, 0x9b, 0x46, 0xa4,
	0x38, 0x79, 0x07, 0x30, 0xcd, 0x4b, 0x4c, 0x51, 0xe7, 0x68, 0xdc, 0x5c, 0x5b, 0x59, 0x6c, 0x90,
	0xae, 0x0b, 0x84, 0x07, 0x8e, 0x9d, 0xab, 0x4d, 0x65, 0xe9, 0xba, 0x8e, 0xf0, 0x20, 0x79, 0x03,
	0xbd, 0x6f, 0x5b, 0x27, 0x10, 0xde, 0xb9, 0x8c, 0xfb, 0x34, 0xff, 0xe9, 0xcf, 0x75, 0x84, 0x07,
	0x8e, 0xdd, 0x11, 0x5b, 0x9f, 0x23, 0x90, 0xfc, 0x6a, 0x41, 0x34, 0x41, 0xf5, 0x05, 0xad, 0xa4,
	0xae, 0x63, 0x88, 0xdc, 0x54, 0x06, 0xed, 0x57, 0x59, 0x62, 0x2d, 0x58, 0x93, 0x62, 0x2f, 0xa0,
	0x5f, 0xc9, 0x12, 0xd3, 0xb5, 0x9c, 0x63, 0x2d, 0xdc, 0x81, 0x70, 0x53, 0xd9, 0xc3, 0xbc, 0x14,
	0xbb, 0x9a, 0x7e, 0xee, 0x6b, 0xea, 0xdb, 0x8b, 0xd7, 0xa4, 0xd8, 0x15, 0x80, 0x33, 0x51, 0xea,
	0x4c, 0x64, 0x78, 0x27, 0x6e, 0x0d, 0xa3, 0xf1, 0x60, 0xe4, 0x7d, 0x36, 0xda, 0xfb, 0x6c, 0x34,
	0xdd, 0xfb, 0x4c, 0x34, 0xb2, 0x1b, 0xae, 0x08, 0x49, 0xd5, 0xbd, 0x2b, 0x2e, 0xa0, 0xaf, 0xea,
	0x8d, 0x18, 0x12, 0x3c, 0x1a, 0x3f, 0x1d, 0x35, 0xad, 0xbd, 0xdf, 0x97, 0x38, 0xe4, 0x1d, 0x56,
	0xd7, 0xfb, 0xe7, 0xea, 0xfa, 0x8d, 0xd5, 0xb1, 0x04, 0x4e, 0x32, 0x54, 0x53, 0x2d, 0x2b, 0xb3,
	0x54, 0xba, 0xe4, 0x40, 0xd7, 0x1f, 0x71, 0x8c, 0x43, 0x77, 0xad, 0x8a, 0x5d, 0xa6, 0x2a, 0x1e,
	0xd1, 0x46, 0xf6, 0x90, 0xbe, 0x68, 0xf5, 0xe3, 0xfb, 0xa7, 0x29, 0x3f, 0xa9, 0xbf, 0x78, 0xe8,
	0x6e, 0x73, 0xe1, 0x25, 0x3f, 0x25, 0xde, 0x83, 0xc4, 0x40, 0x77, 0x82, 0xea, 0x63, 0x5e, 0xa0,
	0x7b, 0x39, 0xcb, 0xbc, 0xc0, 0x86, 0x40, 0x0f, 0xd8, 0x6d, 0x63, 0xa1, 0xf3, 0x2d, 0xea, 0x5a,
	0x9a, 0x1a, 0xb1, 0x4b, 0xe8, 0x39, 0x11, 0x53, 0xb4, 0xfe, 0x51, 0x45, 0x63, 0x7e, 0xb4, 0x8c,
	0x86, 0x07, 0xc4, 0x43, 0x66, 0xf2, 0x3b, 0x80, 0x50, 0xa0, 0xd9, 0x14, 0x96, 0xbd, 0xad, 0x25,
	0x22, 0x6b, 0xf2, 0x80, 0x4a, 0x3c, 0x3f, 0x2a, 0x71, 0x70, 0xae, 0x68, 0xa4, 0xb2, 0xd7, 0x10,
	0x7a, 0xa9, 0xa9, 0xa3, 0x68, 0xfc, 0xe4, 0xe8, 0x90, 0x7f, 0x58, 0xa2, 0x4e, 0x61, 0x43, 0x68,
	0xe7, 0xd5, 0x52, 0x91, 0x7d, 0xa2, 0xf1, 0xd9, 0xe3, 0x16, 0xdd, 0xf8, 0x82, 0x32, 0xdc, 0x96,
	0x50, 0x6b, 0xa5, 0xc9, 0x4e, 0x7d, 0xe1, 0xc1, 0xf8, 0x03, 0xb4, 0x27, 0x37, 0xef, 0x3f, 0xb3,
	0x2b, 0xe8, 0xde, 0x6a, 0x35, 0x47, 0x63, 0xd8, 0xe0, 0x71, 0x91, 0xc3, 0x7f, 0x69, 0xf0, 0xa8,
	0x17, 0x9a, 0x74, 0x16, 0x92, 0xe1, 0x2e, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xa9, 0x7a,
	0x4b, 0x08, 0x05, 0x00, 0x00,
}
